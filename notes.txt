---Just a random notes and thoughts as I go through the ElixirSchool Basics---
1. Basics:
	Atoms are constants whose names are also values 
	Names of modules in Elixir are atoms.
	Booleans True and False are also atoms.
	Elixir allows skipping of the colon : before true, false, and nil.
		Use: Atom.__info__(:functions) to see all functions available for the modules
	Division by default will give a float as a returned value, if needed an int there
	are functions available: like div
	Logical operators:
		or, and, and not are strictly boolean operators, which means that they expect their arguments to be a boolean value.
		or - Checks if either value is truthy. If neither value is truthy, it returns false
		and - Returns true if both values are truthy. Else it returns false
		not - Unary operator that inverts the input value
		Unary operation is an operation with only one operand, i.e. a single input.
		Note: or and and are short-circuit operators, which means that they will only execute the right side if the left side is not enough to determine the return value.
		--------------------------------------------------
		||, && and ! accept any value type. For these operators, all values will return true except false and nil.
		|| - Same functionality as or, but does not expect boolean for either argument
		&& - Same functionality as and, but does not expect boolean for either argument
		! - Same functionality as not, but does not expect boolean for either argument
		
	Note: Elixir’s and and or actually map to andalso and orelse in Erlang.
	
	Interpolation: "Hi #{name}"
	Concatination: "Hi " <> name

2. Collections:
	Lists:  [3.14, :pie, "Apple"]
	Tuples: {3.14, :pie, "Apple"}
	Maps are "go to" elixir's key value store. Unlike keyword lists, they allow keys of any type and are un-ordered
	Keyword lists are most commonly used to pass options to functions bacause: 
		Keys are atoms.
		Keys are ordered.
		Keys do not have to be unique.
		
	Mind that dot syntax when accessing values of the keyes is reserved forMaps only
	When key in a map is an atom we can access the pair's value by using dot convention (i.e. Map.key1)
	update existing key: %{map | foo: "baz"}
	create a new key: Map.put(map, :foo, "baz")
	
3.Enum:
  A set of algorithms for enumerating over enumerables.
	common functions of the enum module:
		all?
		any?
		chunk_every
		chunk_by
		map_every
		each
		map
		min
		max
		filter
		reduce
		sort
		uniq
4. Pattern matching:
	Match operator - the = operator is a match operator, comparable to the equals sign in algebra. Writing it turns the whole expression into an equation (rownanie) and makes Elixir match the values on the left hand with the values on the right hand. If the match succeeds, it returns the value of the equation
	
	Pin operator - The match operator performs assignment when the left side of the match includes a variable. In some cases this variable rebinding behavior is undesirable. For these situations we have the pin operator: ^. When we pin a variable we match on the existing value rather than rebinding to a new one
5. Control structures:
	are defined as macros, not language constructs. You can find their implementation in the Kernel module.
	
	if and unless
	cases
	
	the use of pin ^ in elixir
	The pin operator
		Now that you understand what pattern matching is, let’s have a look at the pin ( ^ ) operator !
		remember the two effect of pattern matching :
			it matches the value on the left hand side with the value on the right hand side. if it matches and if the left hand side includes a variable, it assigns the corresponding value from the right hand side to the variable.
		This is great but sometimes, for some reasons, I just want to make sure what I have on the left hand side matches with what I have on the right hand side, without any assignment in case I have a variable on the left hand side. In other words, I just want to compare both sides.
		This is exactly what the ^ operator allows me to do : It pins the variable on its value and prevent any assignment to this variable when using pattern matching.
		
		read more here: https://medium.com/@Julien_Corb/understand-the-pin-operator-in-elixir-a6f534d865a6
		
	guard clauses
	cond - When we need to match conditions rather than values we can turn to cond instead of case
	with else

6. Functions
	In Elixir and many functional languages, functions are first class citizens. 
	
	Anonymous functions + shortcut
		



           